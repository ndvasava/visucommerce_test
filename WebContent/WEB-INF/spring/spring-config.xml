<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
	     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">
        
    <!-- Seam permet la gestion des conversations (mini-session), ainsi que le lien entre une conversation et l'ouverture/fermeture d'un entitymanager 
    	dédié à cette conversation. Laisser Spring gérer la transaction coupe l'accès à ces fonctionnalités entre la conversation et l'entity-manager.
    	Car Spring ne permet pas la gestion d'un context de persistence. Objectif : 
    		Donner à Spring l'accès au manager de context de persistence de SEAM
    		Pouvoir utiliser tous les outils de Spring pour l'intégration avec JPA : JPATemplate, Annotation, etc ...
    		-->
    		    
	<!-- creation datasource MYSQL -->
	<bean id="dataSourceMYSQL" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/visuc"/>
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>
	
	<!-- Création de la brique d'encapsulation de la datasource, permettant d'injecter celle-ci dans le contexte de persistence seam 
		via un EntityManagerFactory JPA local. Sont injectés la datasource ainsi que la description du mode de persistence : dialect+hbm2dll
	 	Here we are using a spring configured EMF you can just as easily use a Seam configured EMF using 
	 	<persistence:entity-manager-factory/> unless your project depends upon some functionality spring provides an EMF such as the 
	 	ability to inject a dataSource.
	-->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSourceMYSQL"/>
		<property name="persistenceUnitName" value="localScoped"/>
	</bean>
	
	<!-- creation de l'entityManagerFactory. L'entityManager de Seam encapsule la gestion du contexte de persistence tout en correspondant au besoin 
		de factory lié à l'injection Spring.
		 EMF that wraps a Seam Managed EM instance for use in Spring -->
	<bean id="seamEntityManagerFactory" class="org.jboss.seam.ioc.spring.SeamManagedEntityManagerFactoryBean">
		<!-- The Seam managed-persistence-context component name. -->
		<property name="persistenceContextName" value="entityManager" />
		<!-- Optionally provide a unit name.  If not specified the default would be the persistenceContextName -->
		<property name="persistenceUnitName" value="conversationScoped"/>
	</bean>
	
	<!-- configure manuellement l'entityManagerFactory qui sera utilisé via PersistenceAnnotationBean et la valeur specifie
		dans le persistenceUnitName (attribut repris dans les définitions des différents entitymanagerfactory pouvant exister dans spring) -->
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor">
		<property name="defaultPersistenceUnitName" value="conversationScoped"/>
	</bean>
	
	<!-- Creation du transactionManager 
		 This example uses resource local JpaTransactionManager.  You could just as easily use a JtaTransactionManager -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<!-- Be sure to specify the SeamManagedEntityManagerFactory since that will manage the EM that will be
		beginning and ending transactions.-->
	   	<property name="entityManagerFactory" ref="seamEntityManagerFactory"/>
	</bean>
	
	<!-- configuration du proxy de transaction pour l'application, nécessite de disposer d'un transactionmanager(ici fourni par JPA) -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager" >
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="*" read-only="true" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

	<!-- Configuration manuelle via AOP de certaines regles de transaction, ou simplement d'une surveillance via automatisation des logs pour
	toute la couche service. S'appuit sur le proxy déclaré précédemment -->
	<aop:config>
        <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* *..service.*Manager.*(..))"/>
    </aop:config>
    
    
    <!-- ######################################################################### -->
	<!-- Configuration Mode debug                                                  -->
	<!-- ######################################################################### -->
	
	<bean id="debugEnabled" class="java.lang.String">
		<constructor-arg value="${debugEnabled}"/>	
	</bean>
</beans>